Домашнее задание 10 Helm
    0. Установка Helm

        0.1 Создание кластера
            gcloud container clusters create "mycluster"
        
        0.2 Скачиваем helm
            wget https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz

        0.3 Создаем файл манифеста
            kubectl apply -f tiller/v1/01-tiller-sa.yaml 

        0.4 Инициализируем
            helm init --service-account=tiller
            helm version

    1. Развернем 
        1.1 Развернем nginx-ingress
            helm upgrade --install nginx-ingress stable/nginx-ingress --wait --namespace=nginx-ingress --version=1.11.1

        1.2 Cert-manager
            1.2.1 Создать namespace cert-manager
                kubectl apply -f tiller/v2/01-namespace.yml

            1.2.2 Создать сервисный аккаунт tiller-cert-manager в namespace cert-manager
                kubectl apply -f tiller/v2/02-sa.yml 

            1.2.3 Создать роль 
                kubectl apply -f tiller/v2/03-role.yaml

            1.2.4 Применить RoleBinding
                kubectl apply -f tiller/v2/04-rolebinding.yaml

            1.2.5 Инициализируем 
                helm init --tiller-namespace cert-manager --service-account tiller-cert-manager

            1.2.6 Добавим репозиторий
                helm repo add jetstack https://charts.jetstack.io

            1.2.7 Добавим CRD (https://github.com/jetstack/cert-manager/tree/master/deploy/charts/cert-manager)
                kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.1/cert-manager.yaml 
                ---
                https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
                # Install the CustomResourceDefinitions and cert-manager itself
                kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.11.0/cert-manager.yaml (Ошибка в конфиге)
                kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.9/deploy/manifests/00-crds.yaml

            1.2.8 Label
                kubectl label namespace cert-manager certmanager.k8s.io/disable-validation="true" 

            1.2.9 Установим cert-manager
                helm upgrade --install cert-manager jetstack/cert-manager --wait \
                    --namespace=nginx-ingress \
                    --version=0.9.0 \
                    --tiller-namespace cert-manager
                (Получим ошибку)


                helm upgrade --install cert-manager jetstack/cert-manager --wait \
                    --namespace=cert-manager \
                    --version=0.9.0 \
                    --tiller-namespace cert-manager
                (Получим ошибку)

            1.2.10 Удалим и установим 
                helm delete --purge cert-manager \
                    --tiller-namespace cert-manager

                helm upgrade --install cert-manager jetstack/cert-manager --wait \
                    --namespace=cert-manager \
                    --version=0.10.1  \
                    --tiller-namespace cert-manager \
                    --atomic

            1.2.11 При новой установке получаем ошибку
                Error: release cert-manager failed: clusterroles.rbac.authorization.k8s.io is forbidden: 
                User "system:serviceaccount:cert-manager:tiller-cert-manager" cannot create resource "clusterroles"
                in API group "rbac.authorization.k8s.io" at the cluster scope
                Successfully purged a chart!
                Error: release cert-manager failed: clusterroles.rbac.authorization.k8s.io is forbidden: 
                User "system:serviceaccount:cert-manager:tiller-cert-manager" cannot create resource "clusterroles"
                in API group "rbac.authorization.k8s.io" at the cluster scope

                Не хватает прав для создания clusterroles

            1.2.12 Перелогинимся и снова попробуем установить
                kubectl delete pod/tiller-deploy-5d6cc99fc-4hvl6 -n kube-system
                rm -rf /home/lex/.helm

                helm init --service-account=tiller
                helm repo add jetstack https://charts.jetstack.io

                helm upgrade --install cert-manager jetstack/cert-manager --wait \
                    --namespace=cert-manager \
                    --version=0.10.1 \
                    --atomic

            1.2.13 Проверим что запустилось
                kubectl get pods --namespace cert-manager

            1.2.14 Что не хватает
                В документации описывают ClusterIssues и Issues. Создаем
                kubectl apply -f cert-manager/01-clusterissues.yaml 

    2. Chartmuseum
        2.1 Установим плагин
            helm plugin install https://github.com/rimusz/helm-tiller

        2.2 Узнаем External Ip nginx-ingress
            #kubectl get svc -A
            34.90.200.18
            34.90.176.231
            35.204.190.233

        2.3 Кастомизация установки chart museum
            mkdir chartmuseum
            wget https://raw.githubusercontent.com/helm/charts/master/stable/chartmuseum/values.yaml
            поправим 
            оставим ingress 


        2.4 Установим 
            helm tiller run \
                helm upgrade --install chartmuseum stable/chartmuseum --wait \
                    --namespace=chartmuseum \
                    --version=2.3.2 \
                        -f chartmuseum/values.yaml

        2.5 Helm ничего не знает про установку
            helm list

        2.6 А локальный tiller знает
            helm tiller run helm list 

        2.7 Переустановить 
            
            kubectl get secrets -n kube-system

            helm tiller run \
                helm delete --purge chartmuseum 

            export HELM_TILLER_STORAGE=configmap

            helm upgrade --install chartmuseum stable/chartmuseum --wait \
                     --namespace=chartmuseum \
                     --version=2.3.2 \
                         -f chartmuseum/values.yaml

            kubectl get configMaps -n kube-system

        2.8 Заходим на сайт chartmuseum.34.90.200.18.nip.io (Нужно уточнить)
            сайт должен иметь валидный сертификат Lets Encrypt 

        2.9 Установка и удаление (заливка chart на chartmuseum)
            
//            2.9.0 Упаковать в tgz
//                helm lint
//                helm package .

            2.9.1 Добавить репозиторий
                helm repo add chartmuseum https://chartmuseum.34.90.158.239.nip.io

            2.9.2  Залить в chartmuseum
                helm plugin install https://github.com/chartmuseum/helm-push
                helm push harbor chartmuseum
                // или curl -L --data-binary "@harbor-1.1.2.tgz" https://chartmuseum.34.90.158.239.nip.io/api/charts

            2.9.3  Поищем пакет
                helm repo update
                helm search harbor

            2.9.4  Установим Harbor из chartmuseum
                helm install chartmuseum/harbor --name myharbor

            2.9.5 меняем DNS запись на DNS сервере. И все работает.



    3. Harbor
        3.1 Установим helm3
            wget https://get.helm.sh/helm-v3.0.0-linux-amd64.tar.gz
            sudo mv helm /usr/local/bin/helm3

        3.2 Удалить tiller
            kubectl delete deployment tiller-deploy -n kube-system
            helm list
            helm3 list

        3.3 Установить Harbor с помощью helm3 и поправить value чтобы сервис был доступен с валидным сертификатом
            3.3.1 Скачаем файл values c 
                https://github.com/goharbor/harbor-helm

            3.3.2 Поправим ingress в values

            3.3.3 Добавим репозиторий
                helm3 repo add harbor-demo https://helm.goharbor.io
                helm3 repo update

            3.3.4 Создадим Namespace
                kubectl create namespace harbor

            3.3.5 Установим
                helm3 upgrade --install harbor harbor-demo/harbor --wait \
                    --namespace=harbor \
                    --version=1.1.2 \
                    -f harbor/values.yaml

        3.4 Helmfile 

            Я не сделал самостоятельно, решение взял у SOMikhaylov
            Спасибо чуваку. Респект и уважуха.
            Мне интересно как это работает. А учтут мне звездочку или нет - мне наплевать.

            3.4.0 Переразвернем кластер
                gcloud container clusters delete "mycluster" && gcloud container clusters create "mycluster"

            3.4.1 Запустим Helm 
                kubectl apply -f tiller/v1/01-tiller-sa.yaml 
                helm init --service-account=tiller

            // 3.4.2 Узнаем nginx-ingress external ip 
                helm upgrade --install nginx-ingress stable/nginx-ingress --wait --namespace=nginx-ingress --version=1.11.1
                kubectl get svc -A
                helm delete --purge nginx-ingress

            // 3.4.3 Пропишем DNS запись

            3.4.4 Установим diff
                helm plugin install https://github.com/databus23/helm-diff
                kubectl create ns harbor

            3.4.5 Запустим helmfile
                helmfile apply
                helmfile sync --concurrency=1


    4. Создаем свой helm chart
        4.1 Скачаем
            wget https://github.com/microservices-demo/microservices-demo

        4.2 Создадим пустой chart
            helm create socks-shop

        4.3 Удаляем все с template и values.yaml
            rm socks-shop/values.yaml
            rm -rf socks-shop/templates/*
            cd socks-shop/templates
            wget https://raw.githubusercontent.com/express42/otus-platform-snippets/master/Module-04/05-Templating/manifests/all.yaml

        4.4 Установим
            helm upgrade --install socks-shop ./socks-shop
            kubectl get svc
            gcloud compute firewall-rules create myservice --allow tcp:30001
            
            Зайдем на сайт <ip>:30001

        4.5 Создаем проект frontend
            helm create frontend
            rm frontend/values.yaml
            rm -rf frontend/templates/*

        4.6 Создаем service.yaml, deployment.yaml, ingress.yaml

        4.7 Устанавливаем
            kubectl create namespace socks-shop
            helm upgrade --install socks-shop ./socks-shop --namespace socks-shop
            helm upgrade --install frontend ./frontend --namespace socks-shop

        4.8 Шаблонизируем и напишем requirements
            helm delete --purge frontend
            helm dep update socks-shop

        4.9 Вытаскиваем сервис MongoDB (carts-db)
            helm create mongodb
            rm mongodb/values.yaml
            rm -rf mongodb/templates/*
            helm dep update socks-shop

        4.10 Запускаем 
            helm upgrade --install socks-shop ./socks-shop --namespace socks-shop
            kubectl get pod -n socks-shop

        4.11 Запускаем на NodePort-у
            helm upgrade --install socks-shop ./socks-shop --namespace socks-shop --set frontend.service.NodePort=31234
            gcloud compute firewall-rules create myservice-31234 --allow tcp:31234
            kubectl get node -o wide

    5. helm-secrets
        5.1 Установим Homebrew на Debian Linux
            sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
            echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' >>~/.bash_profile
            eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)

        5.2 Скачиваем
            brew install sops
            brew install gnupg2
            brew install gnu-getopt
            helm plugin install https://github.com/futuresimple/helm-secrets --version 2.0.2

        5.3 Генерируем новый GPG ключ
            gpg --full-generate-key
            gpg -k

        5.4 Создать файл kubernetes-templating/frontend/secrets.yaml
            visibleKey: hiddenValue

        5.5 Зашифруем его
            sops -e -i --pgp <$ID> secrets.yaml
            вместо <ID> лучше вставить ключ

        5.6 Расшифровать файл
            # helm secrets
            helm secrets view secrets.yaml
            visibleKey: hiddenValue

            # sops
            sops -d secrets.yaml

        5.7 Создаем frontend/templates/secret.yaml

        5.8 Выполняем установку
            helm secrets upgrade --install frontend kubernetes-templating/frontend --namespace socks-shop \
                -f kubernetes-templating/frontend/values.yaml \
                -f kubernetes-templating/frontend/secrets.yaml

        5.9 Создание репозитория
            5.9.1 Упакуем
                cd mongodb
                helm package 
                cd ../socks-shop/
                helm package .
                cd ../
                cd ../frontend/
                helm package .

            5.9.2 Кладем через веб-интерфейс Harbor пакеты

            5.9.3 Выполняем скрипт repo.sh

            5.9.4 Ищем пакеты
                helm search templating

                lex@mebian:~/Документы/otus-kuber/labs/lab10/frontend$ helm search templating
                NAME                    CHART VERSION   APP VERSION     DESCRIPTION                
                templating/frontend     0.1.0           1.0             A Helm chart for Kubernetes
                templating/mongodb      0.1.0           1.0             A Helm chart for Kubernetes
                templating/socks-shop   0.1.0           1.0             A Helm chart for Kubernetes

    6. Kubecfg
        6.1 Вытаскиваем из конфига all.yaml Deployment и Service для catalogue и payment

        6.2 Переустановим и убедимся что сервисы catalogue и payment пропали
            helm upgrade --install socks-shop ./socks-shop --namespace socks-shop

        6.3 Установим kubecfg
            brew install kubecfg

        6.4 Проверим что манифесты генерируются корректно
            kubecfg show services.jsonnet

        6.5 Установим
            kubecfg update services.jsonnet --namespace socks-shop

    7. Kustomize
        7.1 Kustom-изуем. В папке base лежат сами монифесты и файл kustomize указывающих какие ресурсы нужно трогать для кастомизации
            В папке overlays описаны окружения.

        7.2 Для проверки
            kubectl apply -k kubernetes-templating/kustomize/overlays/socks-shop